<?xml version="1.0" encoding="utf-8"?>
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <id>etcd</id>
    <version>3.4.34</version>
    <packageSourceUrl>https://github.com/chocolatey-community/chocolatey-packages/tree/master/automatic/etcd</packageSourceUrl>
    <owners>chocolatey-community,dgalbraith,Andrei Bejenaru,Robert Labrie</owners>
    <title>etcd (Install)</title>
    <authors>etcd Authors</authors>
    <projectUrl>https://etcd.io</projectUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/chocolatey-community/chocolatey-packages@c681fe2d8274d648911c90a5cfa63b43e4663013/icons/etcd.png</iconUrl>
    <copyright>(c) 2013-2024 etcd Authors</copyright>
    <licenseUrl>https://github.com/etcd-io/etcd/blob/main/LICENSE</licenseUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/etcd-io/etcd</projectSourceUrl>
    <docsUrl>https://etcd.io/docs/latest</docsUrl>
    <mailingListUrl>https://etcd.io/community</mailingListUrl>
    <bugTrackerUrl>https://github.com/etcd-io/etcd/issues</bugTrackerUrl>
    <tags>etcd configuration cli cross-platform foss</tags>
    <summary>etcd is a distributed, consistent key-value store for shared configuration and service discovery</summary>
    <description><![CDATA[**etcd** is a strongly consistent, distributed key-value store that provides a reliable way to store data that needs to
be accessed by a distributed system or cluster of machines. It gracefully handles leader elections during network
partitions and can tolerate machine failure, even in the leader node.

## Features

* **Simple interface** Read and write values using standard HTTP tools, such as curl
* **Key-value storage** Store data in hierarchically organized directories, as in a standard filesystem
* **Watch for changes** Watch specific keys or directories for changes and react to changes in values
* Optional SSL client certificate authentication
* Benchmarked at 1000s of writes/s per instance
* Optional TTLs for keys expiration
* Properly distributed via Raft protocol  

## Package Parameters

* The package will pass package parameters to the etcd service  
Example: `choco install etcd -y --params="-discovery https://discovery.etcd.io/tokengoeshere"`

## Notes

* This package installs **etcd** as a service, and makes **etcdctl** (the command line client) available in the path
* The service is managed with NSSM, you can change the service parameters easily by running `nssm edit etcd`
* Windows support is limited to 64-bit systems
* Originally packaged by Robert Labrie (https://github.com/robertlabrie)
]]></description>
    <releaseNotes>Please check out [CHANGELOG](https://github.com/etcd-io/etcd/blob/main/CHANGELOG/CHANGELOG-3.4.md) for a full list of changes. And make sure to read [upgrade guide](https://github.com/etcd-io/website/blob/main/content/en/docs/v3.4/upgrades/upgrade_3_4.md) before upgrading etcd (there may be breaking changes).

For installation guides, please check out [play.etcd.io](http://play.etcd.io) and [operating etcd](https://github.com/etcd-io/etcd/tree/master/Documentation#operating-etcd-clusters). Latest support status for common architectures and operating systems can be found at [supported platforms](https://github.com/etcd-io/website/blob/main/content/en/docs/v3.4/op-guide/supported-platform.md).

###### Linux

```bash
ETCD_VER=v3.4.34

# choose either URL
GOOGLE_URL=https://storage.googleapis.com/etcd
GITHUB_URL=https://github.com/etcd-io/etcd/releases/download
DOWNLOAD_URL=${GOOGLE_URL}

rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
rm -rf /tmp/etcd-download-test &amp;&amp; mkdir -p /tmp/etcd-download-test

curl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /tmp/etcd-download-test --strip-components=1
rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz

/tmp/etcd-download-test/etcd --version
/tmp/etcd-download-test/etcdctl version
```

```bash
# start a local etcd server
/tmp/etcd-download-test/etcd

# write,read to etcd
/tmp/etcd-download-test/etcdctl --endpoints=localhost:2379 put foo bar
/tmp/etcd-download-test/etcdctl --endpoints=localhost:2379 get foo
```

###### macOS (Darwin)

```bash
ETCD_VER=v3.4.34

# choose either URL
GOOGLE_URL=https://storage.googleapis.com/etcd
GITHUB_URL=https://github.com/etcd-io/etcd/releases/download
DOWNLOAD_URL=${GOOGLE_URL}

rm -f /tmp/etcd-${ETCD_VER}-darwin-amd64.zip
rm -rf /tmp/etcd-download-test &amp;&amp; mkdir -p /tmp/etcd-download-test

curl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-darwin-amd64.zip -o /tmp/etcd-${ETCD_VER}-darwin-amd64.zip
unzip /tmp/etcd-${ETCD_VER}-darwin-amd64.zip -d /tmp &amp;&amp; rm -f /tmp/etcd-${ETCD_VER}-darwin-amd64.zip
mv /tmp/etcd-${ETCD_VER}-darwin-amd64/* /tmp/etcd-download-test &amp;&amp; rm -rf mv /tmp/etcd-${ETCD_VER}-darwin-amd64

/tmp/etcd-download-test/etcd --version
/tmp/etcd-download-test/etcdctl version
```

###### Docker

etcd uses [`gcr.io/etcd-development/etcd`](https://gcr.io/etcd-development/etcd) as a primary container registry, and [`quay.io/coreos/etcd`](https://quay.io/coreos/etcd) as secondary.

```bash
rm -rf /tmp/etcd-data.tmp &amp;&amp; mkdir -p /tmp/etcd-data.tmp &amp;&amp; \
  docker rmi gcr.io/etcd-development/etcd:v3.4.34 || true &amp;&amp; \
  docker run \
  -p 2379:2379 \
  -p 2380:2380 \
  --mount type=bind,source=/tmp/etcd-data.tmp,destination=/etcd-data \
  --name etcd-gcr-v3.4.34 \
  gcr.io/etcd-development/etcd:v3.4.34 \
  /usr/local/bin/etcd \
  --name s1 \
  --data-dir /etcd-data \
  --listen-client-urls http://0.0.0.0:2379 \
  --advertise-client-urls http://0.0.0.0:2379 \
  --listen-peer-urls http://0.0.0.0:2380 \
  --initial-advertise-peer-urls http://0.0.0.0:2380 \
  --initial-cluster s1=http://0.0.0.0:2380 \
  --initial-cluster-token tkn \
  --initial-cluster-state new \
  --log-level info \
  --logger zap \
  --log-outputs stderr

docker exec etcd-gcr-v3.4.34  /usr/local/bin/etcd --version
docker exec etcd-gcr-v3.4.34  /usr/local/bin/etcdctl version
docker exec etcd-gcr-v3.4.34  /usr/local/bin/etcdctl endpoint health
docker exec etcd-gcr-v3.4.34  /usr/local/bin/etcdctl put foo bar
docker exec etcd-gcr-v3.4.34  /usr/local/bin/etcdctl get foo
```</releaseNotes>
    <dependencies>
      <dependency id="nssm" version="2.24.101" />
    </dependencies>
  </metadata>
  <files>
    <file src="tools\**" target="tools" />
    <file src="legal\**" target="legal" />
  </files>
</package>
