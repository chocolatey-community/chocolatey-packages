<?xml version="1.0"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
  <metadata>
    <id>julia</id>
    <version>1.7.1</version>
    <title>Julia programming language</title>
    <authors>Jeff Bezanson, Alan Edelman, Stefan Karpinski, Viral B. Shah, Julia contributors</authors>
    <owners>chocolatey-community, FlorianRappl, drel</owners>
    <licenseUrl>https://github.com/JuliaLang/julia/blob/master/LICENSE.md</licenseUrl>
    <projectUrl>https://julialang.org</projectUrl>
    <releaseNotes>https://github.com/JuliaLang/julia/releases/tag/v1.7.1</releaseNotes>
    <packageSourceUrl>https://github.com/chocolatey-community/chocolatey-packages/tree/master/automatic/julia</packageSourceUrl>
    <projectSourceUrl>https://github.com/JuliaLang/julia</projectSourceUrl>
    <docsUrl>http://docs.julialang.org/</docsUrl>
    <bugTrackerUrl>https://github.com/JuliaLang/julia/issues</bugTrackerUrl>
    <iconUrl>https://cdn.jsdelivr.net/gh/chocolatey-community/chocolatey-packages@b6cf0f7f72e8e037e6aa1e7ca15ec35a492f959f/icons/julia.png</iconUrl>
    <requireLicenseAcceptance>false</requireLicenseAcceptance>
    <description><![CDATA[[Julia](https://julialang.org/) is a high-level, high-performance dynamic programming language for technical computing, with syntax that is familiar to users of other technical computing environments. It provides a sophisticated compiler, distributed parallel execution, numerical accuracy, and an extensive mathematical function library. The library, largely written in Julia itself, also integrates mature, best-of-breed C and Fortran libraries for linear algebra, random number generation, signal processing, and string processing. In addition, the Julia developer community is contributing a number of external packages through Juliaâ€™s built-in package manager at a rapid pace. IJulia, a collaboration between the IPython and Julia communities, provides a powerful browser-based graphical notebook interface to Julia.

## Features

- Multiple dispatch: providing ability to define function behavior across many combinations of argument types
- Dynamic type system: types for documentation, optimization, and dispatch
- Good performance, approaching that of statically-typed languages like C
- A built-in package manager
- Lisp-like macros and other metaprogramming facilities
- Call Python functions: use the PyCall package[a]
- Call C functions directly: no wrappers or special APIs
- Powerful shell-like abilities to manage other processes
- Designed for parallel and distributed computing
- Coroutines: lightweight green threading
- User-defined types are as fast and compact as built-ins
- Automatic generation of efficient, specialized code for different argument types
- Elegant and extensible conversions and promotions for numeric and other types
- Efficient support for Unicode, including but not limited to UTF-8
]]></description>
    <summary>The Julia Language: A fresh approach to technical computing.</summary>
    <tags>julia language scientific computing dynamic programming repl data visualization machine learning jit admin foss cross-platform</tags>
    <dependencies>
      <dependency id="chocolatey-core.extension" version="1.3.3" />
    </dependencies>
  </metadata>
  <files>
    <file src="legal\**" target="legal" />
    <file src="tools\**" target="tools" />
  </files>
</package>
